generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id @default(uuid())
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userCourses UserCourse[]

  @@map("sessions")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  isPreset    Boolean  @default(false)
  createdAt   DateTime @default(now())

  roadmaps    Roadmap[]
  userCourses UserCourse[]

  @@map("courses")
}

model UserCourse {
  id        String   @id @default(cuid())
  sessionId String
  courseId  String
  status    String   @default("active") // active, completed, paused
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  session      Session             @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  course       Course              @relation(fields: [courseId], references: [id], onDelete: Cascade)
  nodeProgress UserNodeProgress[]
  studyPlans   StudyPlan[]
  studyLogs    StudyLog[]
  assessments  AssessmentSession[]

  @@unique([sessionId, courseId])
  @@map("user_courses")
}

model Roadmap {
  id        String   @id @default(cuid())
  courseId  String   @unique
  title     String
  graphData Json // nodes and edges relationship data
  createdAt DateTime @default(now())

  course Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  nodes  KnowledgeNode[]

  @@map("roadmaps")
}

model KnowledgeNode {
  id             String @id @default(cuid())
  roadmapId      String
  title          String
  description    String
  prerequisites  Json // prerequisite node IDs array
  estimatedHours Float
  position       Json // {x, y} coordinates

  roadmap      Roadmap            @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  userProgress UserNodeProgress[]

  @@map("knowledge_nodes")
}

model UserNodeProgress {
  id               String    @id @default(cuid())
  userCourseId     String
  nodeId           String
  status           String // not_started, next, completed, needs_review
  masteryScore     Int       @default(0) // 0-100
  lastAssessed     DateTime?
  studyTimeMinutes Int       @default(0)
  updatedAt        DateTime  @updatedAt

  userCourse UserCourse    @relation(fields: [userCourseId], references: [id], onDelete: Cascade)
  node       KnowledgeNode @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  @@unique([userCourseId, nodeId])
  @@map("user_node_progress")
}

model AssessmentSession {
  id           String   @id @default(cuid())
  userCourseId String
  nodeIds      Json // tested node IDs
  questions    Json // AI-generated questions
  answers      Json? // user answers
  score        Float?
  completed    Boolean  @default(false)
  createdAt    DateTime @default(now())

  userCourse UserCourse @relation(fields: [userCourseId], references: [id], onDelete: Cascade)

  @@map("assessment_sessions")
}

model StudyPlan {
  id           String   @id @default(cuid())
  userCourseId String
  targetDays   Int
  dailyHours   Float
  planData     Json // detailed plan data
  progress     Json? // daily progress tracking
  createdAt    DateTime @default(now())

  userCourse UserCourse @relation(fields: [userCourseId], references: [id], onDelete: Cascade)

  @@map("study_plans")
}

model StudyLog {
  id             String   @id @default(cuid())
  userCourseId   String
  date           DateTime
  minutesStudied Int
  activityType   String // study, assessment, review
  nodeIds        Json // studied node IDs
  notes          String?
  createdAt      DateTime @default(now())

  userCourse UserCourse @relation(fields: [userCourseId], references: [id], onDelete: Cascade)

  @@map("study_logs")
}
